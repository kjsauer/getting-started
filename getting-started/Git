# Getting Started with Git, GitHub, and GitHub Desktop
Kenneth J. Sauer (kjsauer on GitHub)

## Definitions
Repo = Repository

## Problematic Language in Git Syntax
NB and TODO: Need to update use of "master" (e.g., reminiscent of slavery and indentured servitude) to "main" or "root" as part of the necessary migration away from archaic, bad, old, and problematic language in Git Syntax to something closer to neutral. The update on Git's side is in progress; I'll update those commands in this document someday after I've verified all the commands still work.

## Forking
Do not fork repos unless you are going to actively develop in them.
Otherwise, you are proliferating deprecated software (a la the automatically opt-in GitHub Arctic Archive program).
So long as the origin of the repo still exists, there is no reason to fork it except to spread an obsolete software.
If you need to use the code, download it as a .ZIP file.

## Warnings
Avoid syncing large (e.g., >= 1 GB) files to a Git repo (!!!).
It can lead to crashing/major issues.

## Git Bash
Check present working directory pwd
If needed change it
cd C:/Users/USERNAME

## Git for Windows
Install Git for Windows
Use default options during installation
Recommend latest version (i.e., v2.12 or above)
Earlier versions have bug with “//REMOTE_SERVER_FOLDER” where earlier versions cannot read “//”
In earlier versions, you could only use mapped drives “MAPPED_DRIVE_LETTER:/”

## Confirm Git for Windows works
After installation, launch Git for Windows Bash
Type "pwd"
You should see your present working directory

## NB
Always pull in changes from Remote Server hosting Git folders into Local Computer,
Before you push from your Local Computer into the Remote Server
aka
Always update your Local Computer based on changes in the Remote Server,
Before you commit Local Computer changes to Remote Server

## Initiate Git Repository on Remote Non-GitHub Server
Navigate to folder in Remote Git
Launch Git bash
NB: Use CMD in place of bash whenever possible
NB: Install Git for Windows to have CMD integration
Navigate via "cd PATHNAME" in the Windows command prompt window CMD
Can also right click --> Git Bash from context menu
Set up Git folder via Git Bash
$ git init --bare git-repo-name.git

## Access files via Windows File Explorer Menu/Window
Navigate via File Explorer window
working_dir\project_dir
Open project_name
working_dir\project_dir\project_name

## NB
Do not add to or delete from .git folders
Instead, clone .git folders from the remote server hosting the repo
Clone that repo into your local Git sandbox folder
Make changes locally and sync with remote folders
You can call your local folder of Git repos whatever you want
I store mine in My Documents on a PC

## NB
Use dashes between words in repo name, not spaces or underscores

## For MATLAB Users
Open MATLAB (IDE)
Navigate to folder via File Explorer Window
Right click in window area (not on file)
Source control
Manage files
Sandbox on PC is C:\Users\USERNAME\Documents\Git
Remote is GIT_REPO_FILENAME.git

## Other References
https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/

## Other Git Syntax
$ git push origin master [push from local client to remote server master branch]
$ git pull origin master [pull from remote server master branch to client]
$ git status [get status of local client]
$ git add filename.fileExtension [track, i.e., version control, a file]
$ git push --all origin [???]
$ git commit -m 'test file' --C:/Users/USERNAME/Documents/Git/GIT_PROJECT_DIR/FILENAME.m [commit a single MATLAB file]

## Other Git Syntax
push from local client to remote server master branch
$ git push origin master
pull from remote server master branch to client
$ git pull origin master
get status of local client
$ git status
track, i.e., version control, a file
$ git add filename.fileExtension
$ git push --all origin [???]
$ git commit -m 'test file --C:/Users/[USERNAME]/Documents/Git/SolarFrontierGit/test.m [commit a single file]

## Git GUI
Try also the Git GUI which can be launched from the right click context menu of Git for Windows
Edit\Options to update email address in Git GUI

## NB
Remove old branches on local machine
https://git-scm.com/book/en/v2/Git-Branching-Branch-Management/
Navigate to Git repo
$ pwd to show present working directory
Use $ cd to navigate to Git repo
Use $ cd + space + tab for tab completion
Get to master branch (ignore $)
$ git checkout master
Pull latest and greatest from remote
$ git pull
Enter GitHub credentials
Delete branches using either
$ git branch -d ______
or
$ git branch -D ______

## Test Add File
$ git pull origin master
This should open a text editor
Test commit
$ git commit
$ git push origin master

## Add File to Repository in Git Terminal
Now add test file into repo
$ echo content > newFile.txt
$ git status
$ git add newFile.txt
$ git status
$ git commit --message="test commit"
$ git status
May need to run:
$ git branch --unset-upstream

## Check Git Repository Details
Check user name
$ git config user.name
Check user email
$ git config user.email

## Check and Update Git Repository User Information Details
Git bash into local repo folder
cd in using Git Bash or Windows cmd
Or
Navigate to local repo folder using Windows File Explorer --> Right Click --> Git Bash
Review username and email settings
$ git config --list
Update username and email settings
$ git config --local user.email "YOUR.NAME@EMAILDOMAIN.com
$ git config --local user.email "GITHUB_USERNAME@users.noreply.github.com"
To update all repos use “global” in place of “local”
Update user name
$ git config --global user.name "YOUR NAME"

## NB
$ git config --local user.name "Firstname Lastname"
$ git config --local user.email "firstname.lastname@emailprovider.com"
Review settings
$ git config --list
This command might fail if not done in Windows Command Prompt

## Add Example .gitattributes Template File to Git Repository
See template file in repo intended to cover: Common, MATLAB, Python, R
References: https://github.com/alexkaratarakis/gitattributes/

## Add .gitignore File to Git Repository
See template file in repo intended to cover: Windows, MacOS, and MATLAB
References: https://github.com/github/gitignore/

## Proceed to Upload Real Content
Delete test file
Upload all content
Commit
Sync aka Publish

## Git in IDE
Depending on the IDE, there may be an integrated Git option
These typically enable git features like add, commit, delete, rename, etc.
Applies to MATLAB, R, etc.

## NB
Add repos to GitHub Desktop
Commit test text file and attempt Publish
If Publish fails and you are on VPN or DirectAccess
Proceed to troubleshoot according to provided instructions
May need to open git bash within the local repo folder
$ git status
Enter command per displayed instructions
Repeat git status to ensure that fix works

## Add Test Commit File to Git Repository - Example
no .git after FILENAME unless specified
$ cd GIT_REPO_FULLFILEPATHNAME
$ git pull origin master
$ echo "test commit" >> CommitTest.txt
dot adds all
$ git add .
OR use
$ git add CommitTest.txt
$ git diff CommitTest.txt
commit to master
$ git commit -m "Test commit"
$ git commit --help
$ git push origin master

## Delete Test File from Git Repository - Example
$ git status
$ git rm CommitTest.txt
Commit to master
$ git commit -m "Deleted test commit"
$ git status
$ git push origin master
Now repo should be empty again

See GitHub Desktop instructions below

## Local Git Repository Folder Structure Example
Example Git repo name: example_repo_name
AUTHORS
LICENSE
README.md
\docs (integrate with readthedocs)
\example_repo_name (contains source code)
To be continued
.gitattributes
.gitignore

## Deleting a Git Repository
Deleting repo from remote does not affect local
Deleting repo from local does not affect remote
Removing from GitHub Desktop GUI does not affect remote

## GitHub Color Scheme
Pink is deleted
Green is added
Yellow is metadata written by Git

## Connect to Git Repository in Local
Navigate to folder in local via Git Bash or Command Prompt
See getting-started-command-line
In folder: type
$ git clone "//servername/full/file/path/and/repo/name.git"

## Git Clone a Git Repository
Cloning a repository
Choose or create a working directory working_dir
Name it what you will
working_dir, Sandbox, GitSandbox, GitWorkingDir, WorkingDir, GitLocal, etc.
Or maybe you already have one, e.g., GitHub
Open Windows CMD shell
Alternatively may use Git Bash
$ cd working_dir
Navigate using cd and dir
git clone command creates new code project directory in working directory
$ git clone "mapped_drive_letter:\full\path\to\git\file\git_filename.git"
NB: Replace all "\" with "/"

## Git Branch
To branch, use command line
$ git branch branch_name
Switch into branch
$ git checkout branch_name
Commits from this point on will track on "branch_name"
NB: Need to further validate and improve notes after this point

## Git Merge
First add and commit everything on your_branch
Then merge
$ git checkout master
$ git merge branch_name
Try to merge any changes made by someone else in the shared repo
Then push
Add and commit all changes locally first
Make local copy of any changes that have occurred in shared repo
$ git fetch origin/master
Then merge origin/master with master

## Git Push
To push changes back to the shared repository, use
$ git push origin master
This depends on "origin" being defined as it would be by git checkout

## Sync workflow
Sync
Commit
Sync

## Definitions
Fork: Copy repo from cloud to cloud
Clone: Copy repo from cloud to computer
Pull request: Pull latest repo changes from head cloud (the repo that is ahead) to base cloud
Sync: Synchronize computer with cloud

## Repository Path
Open Windows File Explorer
Navigate to folder containing all files on your local computer
This is the pathname of your repo

## NB
Make sure you are working on VPN or DirectAccess if applicable
Recommended to use Windows Command Prompt in place of Git Bash
NB: If Command Prompt opens in P: simply type C:

## Deleting Branch
Git Prune???

# Git Commits

##
git log > log0txt.txt
git log > log0csv.csv

##
git --no-pager log > log1csv.csv
git --no-pager log > log1txt.txt

##
git log --pretty=format:'"%H","%h","%T","%t","%P","%p","%an","%ae","%ad","%ar","%cn","%ce","%cd","%cr","%s",' --shortstat --no-merges | paste - - - > log2csv.csv
git log --pretty=format:'"%H","%h","%T","%t","%P","%p","%an","%ae","%ad","%ar","%cn","%ce","%cd","%cr","%s",' --shortstat --no-merges | paste - - - > log2txt.txt

## References
https://stackoverflow.com/questions/10330425/how-do-i-export-a-git-log-to-a-text-file/
https://stackoverflow.com/questions/10418056/how-do-i-generate-a-git-commit-log-for-the-last-month-and-export-it-as-csv/
https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History/

# Git Archive

## Git Archive Method 1

### Master Branch Only
$ git bundle create repo.bundle master

### All Branches
$ git bundle create repo.bundle --all

### Lessons Learned
Do not need ".bundle"

## Git Archive Method 2
$ git archive --output=Archive.zip --prefix=Archive/ master
https://stackoverflow.com/questions/2046918/backing-up-project-which-uses-git/2047141#2047141/

## Git Archive Method 3
Final
Download git_archive_all.py
From:
https://raw.githubusercontent.com/Kentzo/git-archive-all/master/git_archive_all.py
Launch Anaconda Prompt
Switch to Python 3.3
$ activate py33
See: https://stackoverflow.com/questions/14783127/git-archive-export-with-submodules-git-archive-all-recursive/
Navigate to Git repo path
Run the following
$ python "C:/Users/<computername>/Anaconda2/envs/py33/Scripts/git_archive_all.py" myarchive.zip

## Git Archive Method 4
$ git bundle create foo master
$ git bundle create foo-all --all

### Check results
$ git bundle list-heads foo
$ git bundle list-heads foo-all

https://stackoverflow.com/questions/1251713/backup-a-github-repository/1251717#1251717/

## .gitignore
Create text file gitignore.txt
Open in text editor, add rules, save, and close
Navigate to folder in command line
Rename the file in command line
$ ren gitignore.txt .gitignore

# GitHub

## Create Repository on GitHub and Add Collaborators
Go to GitHub
Set up New Repo
Add gitignore, e.g., Python
Add license, e.g., 3-clause BSD
Go to repo
Settings wheel
Collaborators
Add collaborators
Collaborators will need to accept the invitation by logging into their GitHub accounts

## Connect to Git Repository as a Collaborator
Local Computer
Go to C:\Users\USERNAME\Documents\GitHub
Run Git Bash from context menu
Otherwise need to navigate via cmd using cd C:\
Git Bash
$ git clone https://github.com/ACCOUNTNAME/REPONAME.git

# GitHub Desktop

If you use GitHub Desktop, you can add any local Git repo to it
Even if it is not a repo hosted on GitHub
This enables you to track changes to all repos with one GUI

Check GitHub Desktop settings to ensure proper GitHub-assigned email is in use

## GitHub Desktop Settings
Ensure email displays something like <your_github_username>@users.noreply.github.com

## Add Git Repository to GitHub Desktop
Launch GitHub Desktop program (e.g., from Windows start menu)
Add newly added local GitHub folder
Or, if repo is initiated or saved in cloud (e.g., GitHub), clone from cloud

## GitHub
If repo is on GitHub
Log into GitHub
Settings
Email
Block email from getting shared in any commit (!!!)
Enable other privacy settings

## Other References
https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/

## Unrecognized Changes in Commit
Capitalizations, e.g., todo to TODO are not recognized. You need to change something in the filename, commit that, and then revert it for the new capitalization to register in Git/GitHub. In general, changes to folder names are not tracked (not sure why); only files within folders.

## Basic Git and GitHub Repository Contents
NB: This section is referenced in Getting Started Design.
repo-name folder\
--.gitattributes
--.gitignore
--AUTHORS
--COPYRIGHT
--README.md
--Subfolder of same repo-name\
--Subfolder of same repo-name\docs\
--TODO

## Attention and Focus
Keep Git synced--after each edit--to whatever branch is appropriate. If you use the GitHub Desktop application, it will be much easier to manage changes if you sync Git and GitHub after each file is updated (instead of changing many files that are under Git version control and reviewing them as a batch process later). Of course, when work on teams, batch reviews are likely inevitable. This is primarily good practice for working individually.

Promote the "zero GitHub Desktop" policy--try to stay synced!

## Goals
NB: Also in Getting Started with Design.
One (meaningful) Git commit per day.

## Feature Request(s): GitHub
1. Operational Python console w/in GitHub.
2. Automated email to notify Approver upon Pull Request.

## Feature Request(s): GitHub Desktop
1. Save draft commit notes in GitHub Desktop specific to each selected, changed file or combination of selected files. Presently, if you close GitHub Desktop, etc. in the middle of a draft commit note, the text you wrote is gone.
2. Ability to check off changes (w/ check boxes) as you review the edited ("red-lined") file in GitHub Desktop, so you can easily keep track of what changes are reviewed and approved (by you) before you finally commit the updated file.

## Git Workflow
Clone. Branch. Get in. Make your change. Get out. Pull request. Email. Done.