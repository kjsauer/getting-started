# Getting Started with Python
Kenneth J. Sauer (kjsauer on GitHub)

# Anaconda Python Tips and Tricks

## Update Anaconda Python
Launch Anaconda Prompt
$ conda update conda

## Navigate to Folder
Now navigate to your folder using "dir" and "cd <insert_folder_name>"
See Command Line Getting Started notes.

## Launch Jupyter Notebook
Now launch Jupyter Notebook without browser.
See below Jupyter Notebook notes (Ctrl+f: "--no-browser").

## Check Python Version from Anaconda Prompt Command Line
Launch Anaconda Prompt
$ python --version

## Check Python Version from Within Python
$ import sys
$ sys.version_info

## Update Anaconda Python
Launch Anaconda Prompt
$ conda update --all
$ conda update -n root conda

Launch Anaconda Prompt
Windows\Start Menu\Anaconda Prompt
Update Anaconda
$ conda update conda
If using Anaconda
$ conda update anaconda
Allow 15-25 minutes for update all
$ conda update --all
Update Python
$ conda update python
Update Spyder
$ conda update spyder
Update Jupyter Notebook
$ conda update jupyter
$ conda update jupyter notebook
$ conda update ipython (obsolete???)
Option to update Spyder, etc. via Anaconda Navigator

## Miniconda
I could not easily (within a few minutes) understand how to get Jupyter Notebook to work with Miniconda
If using miniconda, need to manually download and maintain Spyder, Jupyter, etc. compatibilities; quite a burden when trying to focus on engineering & scientific research, etc.

## Python Indexing
Starts with 0, not 1

## Scope
The Python described here largely uses Anaconda Python

## Install Anaconda Python
Download and install Anaconda with latest Python available

## Recommended
As usual, need local admin rights to download and install software programs
Get Anaconda Python 3 (latest version)
https://www.anaconda.com/download/#windows/
Python 3.x
Exploration of Miniconda is on my todo

## Primary Imports
import os
import numpy as np
import pandas as pd
pd.set_option('display.height',500)
pd.set_option('display.max_rows',500)
import seaborn as sns
sns.set_style('white')
import matplotlib.pyplot as plt
from matplotlib import rcParams
rcParams['font.family'] = 'sans-serif'
rcParams['font.sans-serif'] = ['Verdana'] # choose font
import matplotlib.pyplot as plt
plt.rcParams['axes.facecolor'] = predefined_color_scheme_variable # choose variable
from matplotlib.ticker import FormatStrFormatter
import matplotlib.image as mpimg

## Other Imports
%matplotlib inline
sns.set(rc={'figure.figsize':(12,6)})
sns.set(context='talk',style='darkgrid',palette='colorblind')
import datetime
import logging
import inspect
import pvlib
from pvlib.location import Location
import pecos
import pvmismatch
import statsmodels as sm
from scipy.optimize import curve_fit

## Find Help
Use "?"
Example
import numpy as np
Make use of "?"
np.array?
np.empty?

## NB
Create a new variable "Flag" in the data frame "df0"
df0['Flag'] = df0.apply(getFlag,axis=1)

## PEP 8 Guidelines
Modules (filenames) should have short, all-lowercase names, and they can contain underscores
Packages (directories) should have short, all-lowercase names, preferably without underscores
Classes should use the CapWords convention
Source:
https://softwareengineering.stackexchange.com/questions/308972/python-file-naming-convention/

## Other Notable Python Syntax
Use of loc
program_flag.loc[program_flag.index == '2016-07-03 09:47:00-07:00']

## Pandas Syntax
axis=0: Runs vertical downwards across rows
axis=1: Runs horizontal across columns

## Advanced String Formatting (simpler to use %% method)
'hi {} the weather is {}'.format("kjs","sunny")
'hi {name} the weather is {weather}'.format(name="kjs",weather="sunny")

## Get IP Address
curl api.ipify.org

## Other Examples
$ conda install -c anaconda scipy=0.16.0
$ pip install seaborn

## Run Anaconda Python the Slow Way
Not sure why
Open cmd
$ cd C:\
Navigate to (options):
$ cd C:\Users\USERNAME\AppData\Local\Continuum\Anaconda2\Scripts\anaconda.exe
$ cd C:\Users\USERNAME\AppData\Local\Continuum\Anaconda2\envs
$ cd C:\Users\USERNAME\AppData\Local\Continuum\Anaconda3\envs

# PVLIB

## Install
$ conda install -c pvlib pvlib

## Help
https://pvlib-python.readthedocs.io/en/latest/

# pvmismatch

## Getting started with pvmismatch
Uninstall any versions of Anaconda Python
Install latest Anaconda Python
Use default settings
Open Anaconda Navigator
Environments
Upgrade any upgradable packages
Environments\Root\Open Terminal
Get ready to install packages by checking the version of the package you want:
https://pypi.python.org/pypi/pvmismatch/
https://pypi.python.org/pypi/pvlib/
https://pypi.python.org/pypi/pecos/
pvmismatch is in Python 2.7

## Spin Up Python Environment
Create new Conda Python 2.7 environment named py27:
$ conda create -n py27 python=2.7 anaconda
$ conda create -n py35 python=3.5 anaconda
Assume 2.7 here:
Switch to that Anaconda environment via command line
Activate py27 (assumes environment has been named as py27)
$ activate py27
$ activate py35

## Check Python Version
See above notes.

## pvmismatch
Now install pvmismatch
$ pip install pvmismatch
$ conda install -c pvlib pvlib
NB: This is still in py27 unless you have changed the path
$ pip install pecos
NB: Same NB as previous
Launch Spyder IDE by typing
$ spyder
Launch Jupyter Notebook by typing
$ jupyter notebook
Return to root
$ deactivate py27
$ deactivate py35

## Check Python Version
See above notes.

# Spyder Interactive Development Environment (IDE)

## Spyder Theme
Oblivion

## Spyder Tips & Trips
Find & replace
$ Ctrl+R

## Turn on Interactive Plotting (Pop-up Plots) in Spyder
Tools
Peferences
IPython console
Graphics
Graphics backend
Backend: Automatic
Switch inline to automatic

## Comments in Spyder
Ctrl+1 to comment

# Anaconda Python

## Switch to Different Anaconda Environment via Command Line
$ activate py27
$ deactivate py27

## Check Python Version
See above notes.

## Install Spyder
$ conda install -c anaconda spyder

## Open Spyder
$ spyder

## Open Jupyter
$ jupyter

## Install a specific Python version
$ conda install python=3.6

## Create Anaconda Python Environment and Name as py27
$ conda search python
$ conda create --name py27 python=2.7
$ conda info --envs

## Create Anaconda Python Environment
$ conda create -n py27 python=2.7 anaconda
$ conda create -n py35 python=3.5 anaconda
$ conda create -n py35 python=3.6 anaconda

## Switch to Different Anaconda Python Environment via Command Line
$ activate py27
$ deactivate py27

## Check Python Version
See above notes.

# Jinja
<!--Example Templating Language-->
<h1>Welcome to insert_appname!</h1>
{% for user in users %}
	<div>{{ user.username }}</div>
{% endfor %}

# Jupyter Notebook Themes

Launch Anaconda Prompt
$ conda install -c conda-forge jupyterthemes
Open a Jupyter Notebook

## Requirements
NB: Make sure you have installed jupyterthemes (launch Anaconda Prompt and run $ conda install -c conda-forge jupyterthemes)
## List available themes
NB: Same as $ get_ipython().system('jt -l')
!jt -l
## Select particular theme
NB: Same as $ get_ipython().system('jt -t gruvboxd')
!jt -t gruvboxd
## Revert to original theme
NB: Start with this commented out to try new theme
#!jt -r

# Jupyter Notebook

## Getting Started
Launch Anaconda Prompt
$ cd path_name
Otherwise navigate to folder in anaconda prompt
Using command line aka terminal aka bash commands
Launch jupyter notebook via
$ jupyter notebook --no-browser
Copy URL from terminal
Launch Moxilla Firefox
Paste URL into browser
Firefox has good jupyter notebook integration
Microsoft browsers (IE, Edge) do not
I have not checked Google Chrome

## Useful Hot Keys in Jupyter Notebook
Comment or uncomment a line
$ Ctrl+"/"
Run cell
$ Ctrl+Enter
Exit cell via escape (Esc)
Enter cell via Enter
Change to markdown when in Esc mode
$ m
Change to code when in Esc mode
$ c
No mouse needed in Jupyter Notebook
Vertical screen orientation recommended

## Jupyter Notebook Figures and Plots
In-line figures
Jupyter Notebook only
$ %matplotlib inline
Interactive figure window
$ %matplotlib qt

## Jupyter Notebook Hot Keys
Use Ctrl+"/" to comment and uncomment
Esc+"b"+Enter escapes the active cell, adds a new cell, and puts the cursor there

## Working with HTML Output Files
Download the HTML to local computer
Open in Chrome or Firefox browser

## Thoughts on Jupyter Notebook
Great for communication and sharing
Not easily legible in text editor
Download as .py for git version control (?)

## Best Practices with Python and Git
Download as .py
The .py folder is easier to review in a Pull Request

## Toggle Code On/Off
# NB: Add to top of Python script.
# Source: https://stackoverflow.com/questions/27934885/how-to-hide-code-from-cells-in-ipython-notebook-visualized-with-nbviewer/
from IPython.display import HTML
HTML('''<script>
code_show=true; 
function code_toggle() {
 if (code_show){
 $('div.input').hide();
 } else {
 $('div.input').show();
 }
 code_show = !code_show
} 
$( document ).ready(code_toggle);
</script>
<form action="javascript:code_toggle()"><input type="submit" value="Click to toggle code on/off."></form>''')

# Pandas

## Alternate Way to Join
df['mfg_product'] = df[['mfg','model_type']].apply(lambda x:''.join(x), axis=1)

## Load Data Set
df = sns.load_dataset('df')

## Top Ten Oldest People Who Have a Ticket
df[df['Ticket'] == 1].sort_values('Age')['Names'].head(10)

## Example for Shared or Mapped Drives
Map network drive SHARED_DRIVE to some drive name (e.g., "X")
Launch Anaconda prompt (Python 2.7)
$ cd PATH/TO/CODE/FOLDER
type into prompt
$ jupyter notebook

## Open Jupyter Notebook on Shared or Mapped Drives via Anaconda Prompt
Not possible to navigate to shared or mapped drive via Jupyter Notebook's web browser directory user interface (UI)
Use Anaconda Prompt and navigate to folder via cd as per the above instructions
Also see getting-started\shell
Launch Anaconda Prompt terminal
Start Menu\Programs\Anaconda\Anaconda Prompt
Basic command line interface (CLI) appears in Present Working Directory (pwd)
C:\Users\USERNAME>
Navigate to the SHARED drive via console
$ "SHARED_AND_MAPPED_DRIVE_NAME:"
See use of "dir" and "cd" in getting-started\shell
$ cd <path_name>
Option to navigate one folder at a time using tab completion
Once in directory,. e.g., folder with .ipynb file(s), launch Jupyter Notebook; see above instructions
Namely, type in prompt
$ jupyter notebook --no-browser
Copy URL and paste into browser (e.g., Firefox)
Jupyter web browser interface will appear in present working directory

## Other Syntax
End program
$ Ctrl+c

# Time Series

## Timestamping
t = pandas.tslib.Timestamp.now()
t
Timestamp('2014-08-05 14:49:39.643701',tz=None)
t.to_datetime()
datetime.datetime(2014,8,5,14,49,39,643701)
t.day
5
t.month
t.year

## Time Zone Localization and Conversion
dat.index = pd.to_datetime(dat.pop('datetime'),utc=True)
dat.index = dat.index.tz_localize('UTC',ambiguous='raise').tz_convert('US/Pacific')

## Monthly Reporting
df['month'] = pd.DatetimeIndex(df['ArrivalDate']).month

## Create Ideal Hourly Time Series
idx = pd.date_range(start_date,end_date,freq='H',tz=None)
df1 = df
df1.index = pd.DatetimeIndex(df1.index)
df1 = df1.reindex(idx) # default = no fill
df2 = df1.tz_localize(None)
df2['Year'] = pd.DatetimeIndex(df2.index).year
df2['Month'] = pd.DatetimeIndex(df2.index).month
df2['Day'] = pd.DatetimeIndex(df2.index).day
df2['Hour'] = pd.DatetimeIndex(df2.index).hour
df2['Minute'] = pd.DatetimeIndex(df2.index).minute
df2['Second'] = pd.DatetimeIndex(df2.index).second

## Resample 5-min to Hourly
df_hourly = df_five_min.resample('H').mean()

# Data Filtration

## Find/Detect Outliers and Replace w/ NaN
Source: https://stackoverflow.com/questions/46576147/pandas-replace-outliers-in-all-columns-with-nan/
threshold_outlier = 3 # manual/visual; replace "3" with custom threshold value
dataset = pd.DataFrame(index = s['insert_variable_name'].index,
                       data = s['insert_variable_name'].values,
                       columns = ['insert_variable_name'])
v = dataset
mask = np.abs((v-v.mean(0))/v.std(0)) > threshold_outlier # statistical z-score outlier detection method
v.loc[mask.insert_variable_name].describe()
v.loc[mask.insert_variable_name]

## Apply Low and High Pass Filters and Replace with NaN
threshold_low_pass = 0 # manual; replace "0" with custom low pass limit/threshold
threshold_high_pass = 100 # manual; replace "100" with custom high pass limit/threshold
insert_variable_name = pd.DataFrame(np.where(mask,np.nan,v),dataset.index,[dataset])
insert_variable_name[(insert_variable_name < threshold_low_pass) | (insert_variable_name > threshold_high_pass)] = np.nan

plot = insert_variable_name.plot(legend=False)

# Save Python Script

## Save Python Script to Local via Command Line
NB: Command line only; does not run within Jupyter Notebook Python script
# jupyter nbconvert --to script insert_ipynb_filename.ipynb

## Save Python Script to Local from Within Jupyter Notebook Python Script
from notebooktoall.transform import transform_notebook
transform_notebook(ipynb_file='insert_ipynb_filename.ipynb',
                   export_list=['html','py'])

## Copy and paste files of this script from local to server
from shutil import copyfile
src = 'insert_ipynb_filename.ipynb'
dst = test_folder = 'C:/Users/.../insert_ipynb_filename.ipynb'
copyfile(src,dst)
dst = test_folder = 'C:/Users/.../insert_ipynb_filename.py'
copyfile(src,dst)
dst = test_folder = 'C:/Users/.../insert_ipynb_filename.html'
copyfile(src,dst)

# Assorted

## Append vs. Concat vs. Merge
Append serves a similar function as concat; use concat when possible for simple concatenation

Merge can be used when merging two spreadsheets/data frames together.

## Pandas Data Typing
df['col_name'] = pd.to_numeric(df['col_name'],errors='coerce')

## Install New Python Library
To get a new Anaconda package, try conda first
Example: Tabula
https://anaconda.org/conda-forge/tabula-py/

## Python Linux VirtualBox
If running Linux in VirtualBox, do not use Anaconda Python. Linux comes with built-in Python. See PyPI "Cheese Shop".

## Check Python Version
See above notes.

## Python Library vs. Module vs. Package
Package is a collection of modules. It must contains an __init__.py file as a flag so that the python interpreter processes it as such. The __init__.py could be an empty file without causing issues. Library is a collection of packages.

Source: <https://kimconnect.com/python-module-vs-package-vs-library-vs-framework/>

## Save as .csv file with datetime format YYYY-MM-DD hh:mm:ss
import os
csv_output_pathname = 'insert_csv_output_file_pathname'
csv_output_filename = 'insert_csv_output_filename'
df.to_csv(os.path.join(csv_output_pathname,csv_output_filename),date_format='%Y-%m-%d %H:%M:%S')

## Python Notebooks and Git
Problems with Python notebooks and Git:
1. Every time you open and run a Python file, Git treats it as a revision.
2. It is difficult to review revisions of a Python notebook in Git because of all the extraneous code. There are many benefits to Jupyter iPython Notebooks (primarily social: shareability and collective understanding); however, .py files and Spyder win out in these important regards.

## Other Reasons to Use Git Over Jupyter Notebooks
Easy to track changes with Git
Variable explorer (variable editor) is essential (!!!)
Spyder also has important debugging tools and insights for speeding up the code

If needed, use a Jupyter Notebook to more easily communicate what an associated Spyder .py file is doing; sometimes easier to start in Jupyter Notebook and migrate to Spyder .py file later.

## Run EXE w/ Python
run('C:\asdf1\asdf2.exe')

## Remove Duplicate Timestamps (Keep First)
df1 = df0[~df0.index.duplicated(keep='first')]