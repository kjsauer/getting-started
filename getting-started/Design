# Getting Started: Code and Program Design Philosophy

## String Inputs
Import all inputs as strings
Convert the data type only when needed
For example, for decimal truncation or use in numerical calculations (e.g., unit conversions)
Then convert back to string

## Rosetta Stone
Ideally every piece of code would have a data structure Rosetta Stone (RS)
Need cookie-cutter code to implement Rosetta Stone in standard way

## Functions
Functions and APIs are similar (receive inputs; send outputs)
Write functions to take inputs with SI units
Thereby not a question as to what the units are

## Software Design
Fundamentals: EXE + config.csv
EXE prompts user for path of config.csv
EXE needs to be able to find config.csv
config.csv has vertical columns like a database
config.csv can have multiple rows representing different sets of inputs
Design config.csv for SQL

## Good Practice
Unit tests
Rosetta Stones
config.csv files
.exe plus runtime files

## General Principles
99% planning; 1% execution

##
Starting a project
Ideally work backwards
Start with end functionality
e.g., Some literal function like Box Plot
This will drive the necessary data structures
Make those data structures in Excel test data file
Implement in Python, MATLAB, R, etc.
If importing/exporting, target CSV database format

##
Start by finding the function you want
The function drives the data structure(s) aka data frame(s)

##
How to avoid messing up a series of user actions in a GUI?

## Concept
How does MS Outlook not mess up my email when I make a series of actions? e.g., Moving emails from one folder to another
Theory: Because it stores a time-ordered queue of every user action and gradually worked through the queue
Apply this concept (user action time series queue) in software (GUI) development

## Data Analysis
Work with clean example SQL or CSV databases when possible
Execute calculations in legible/readable code script (e.g., Python notebook)

## Tests to run to familiarize with new software language
Inf/0
NaN + NaN
5 + NaN
NaN/0

##
When you complete a project, zip all project files and save in project folder
Consider exporting .ipynb to .py as a secondary backup of the code

##
Code
--.ipynb
Data
--.csv
--.xls
--.xlsx
Metadata
--.txt
--.yml
--.xml
--.json

## Lessons Learned
Use Microsoft Excel template instead of Python script; copy/paste data into it. You may also use Excel as a GUI.

##
Package ALL help documentation and ALL examples (unit tests) and ALL unit test data into the repos; yes, the repo will become large, but everything will be in ONE folder that can be easily transferred and booted up and will be ready to rock.

##
Rule: Every input must be a config (or data) file. This way others can tweak the input config files and not the code. Write code so others can get started quickly. Provide unit test with software program, data, and metadata, and program help menu (if needed). Provide answers as well so the user knows if the program ran correctly.

##
Provide:
--_todo/Future Work
--Analysis Templates
--Code and Scripts
--Data
--Docs (incl. Help Menu)
--Lessons Learned
--Metadata
--Report Templates
--Unit Tests: Known inputs
--Unit Tests Results: Known outputs 
--Work Instructions

## _todo List
Always have a _todo List that is numbered.
1. [DONE] (hm) Make _todo list for home tasks.
2. [DONE] (wk) Make _todo list for work tasks.
3. (hm) Win the lottery, amass a fortune, and retire to an island getaway.
4. [DONE] Mark items as Done when completed.

## Unit Test Exercise Philosophy
Unit test: Known inputs/known outputs
Purpose(s):
So that an engineer can know someone/something is properly trained.
So that you can ensure an updated tool yields the same results.

## File Naming
Short yet descriptive filenames are best. Bear in mind Indexing and Search. How would you search for/find the file?

## General Computer Usage
Find ways to avoid using the mouse whenever possible.

## Work vs. Personal
Keep work projects separate from personal projects.
Same GitHub account is fine.
Work on different computers in different repos.
When engaging in industry for learning, etc., use personal email.
When representing a company in the engagement, use company email.

## Documentation
In all cases, package into one, single repository all of the necessary files required to reproduce an expected set of results (which is also contained in the repository). Consider this from the time of project onset.

## Standalone Application (EXE)
tbd.

## Build Auto-Image Detection Tool
Build training GUI.
Have algorithm make guess via artificial intelligence (AI) and machine learning (ML).
Have operator (human) correct guess.
This new human data is incorporated into AI/ML algorithm to improve it.
Calculate % accuracy each time; it should improve up to some high value, e.g., >97.5% (ideally higher).

## Timestamps
Use format YYYY-MM-DD hh:mm:ss

## Output File(s) Storage
Save into pwd\Ouptuts_timestamp,
where timestamp is updated each time.
See MATLAB Getting Started for example.