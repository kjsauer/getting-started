# Getting Started with MATLAB
Kenneth J. Sauer (@kjsauer on GitHub)

## Acronyms
MATLAB: Matrix Laboratory (i.e., data matrix, not Neo Matrix. A bit less exciting, I suppose...)

## Pros of MATLAB
- Easy to build a GUI via GUIDE
- Easy to compile an EXE
- Minimizes software development-related concepts and tasks in favor of science and engineering development
- Not open-source; however, source code is available

## Cons of MATLAB
- Native data ingest and wrangling (incl. Time Series handling) does not compare to Python
- Not nearly as deployable and ubiquitous in the greater software development world
- NOT FREE SOFTWARE (!)
- Not open-source

## MATLAB vs. GNU Octave
Unfortunately, MATLAB is neither free nor open-source software (i.e., it is commercially-sold & proprietary). However, word on the St. nowadays is you can run most MATLAB code in free & open-source GNU Octave, perhaps with a bit of tweaking here & there (not sure; TBD). NB: GNU is free, not open-source, software.*
*Richard Stallman (July 13, 2011). "Why Open Source misses the point of Free Software". Retrieved August 24, 2011.

%% Format MATLAB Workspace
clc; clear; close
format compact;
format long g;

%%
a = [1 1]
conv(a,a)
Want to do conv(a,a,a)
Need to do conv(a,conv(a,a))
function [x] = convm(varargin)
x = varargin{1};
if
first_input_var = varargin{1}
second_input_var = varargin{2}

%% Conventions: Indexing
% MATLAB matrix indexing starts with 1, not 0.
% [R,C]: Rows, columns
% [Row Position, Column Position]
% (As a mnemonic device, think: RC circuit.)

%% Output to .csv
dlmwrite('fileName.csv',variableName,'delimiter',',','precision',12);

%% EXE
% errordlg alone does not terminate code
% Use combination of "msgbox" and "error" instead
% Wrap code with try catch

%% Thoughts on MATLAB
% Designed for non-software developer engineers who need to compute
% Use for excellent exe compiler and uiimport
% Keep MATLAB importers simple, e.g., single numeric or string input

## Other Syntax
Abort program (end present code run)
$ Ctrl+c

# PVLIB MATLAB

## Download Link
https://pvpmc.sandia.gov/applications/pv_lib-toolbox/matlab/

##
Design MATLAB folders based on function/script co-dependencies and the MATLAB path
Namely, what is necessary to add to the path and how when the developer runs the code

## MATLAB Toolbox vs. Library
A toolbox is typically a collection of MATLAB functions and a library a collection of Simulink blocks. Having said that, many MATLAB toolboxes also offer Simulink libraries as well, e.g. Control System Toolbox, System Identification Toolbox, Instrument Control Toolbox, etc...

Source: <https://www.mathworks.com/matlabcentral/answers/8866-toolbox-vs-library/>

## MATLAB Function vs. Script
Scripts are m-files containing MATLAB statements...The biggest difference between scripts and functions is that functions have input and output parameters. Script files can only operate on the variables that are hard-coded into their m-file. As you can see, functions much more flexible.

Source: <https://web.cecs.pdx.edu/~gerry/MATLAB/programming/scripts.html>

## MATLAB Compiler Lessons Learned
Make sure ALL scripts or functions which are to be called when the EXE is run are added to the compiler.
You will likely need to manually add files (namely, functions) to the compiler.
Upon setting up the compiler, recommend to toggle ON the option to output a log file each time the EXE is run.

## Variable Naming
Variable names must start with a letter (not a number) (e.g., a1, not 1a).

## MATLAB Coder
MATLAB can compile down to C. This is good for app deployment.

## Save Ouput(s) to Folder
cd = pwd;
outputs_folder = sprintf('Outputs_%s',datestr(now,30));
folder_name = fullfile(CD,outputs_folder);
mkdir(folder_name);

## Pre-adding Files to the Compiler
Pre-add files to compiler so user does not need to call them in order to successfully run the compiled, standalone EXE application
Add to "Files required for your application to run"
Simply call filename directly in code
CD = pwd;
if isdeployed
	filename = fullfile('insert_filename.csv');
else
	filename = fullfile(CD,'insert_filename.csv');
end

## Log File
Always output a Log File with a standalone, MATLAB, compiled EXE application (e.g., EXE_name_Log_File).

## Compiler
Include config files external to the EXE for record in case the format changes in the future (for posterity); see section of compiler "Files installed for your end user". In contrast with the section of the compiler called "Files required for your application to run", these are not built into the EXE (the latter is where you add any and all files that need to be built into the EXE).

The script in your development environment (dev env) does exactly what the compiled EXE--based on that script--does (when it's working properly). Remember to always add your path (all folders and subfolders), even if you are just compiling an EXE.

## Curve Fitting Tool
Type cftool in workspace to use plotting tool (if you have this toolbox; I do not); extremely easy to lasso and remove "bad" data for the sake of expedient evaluation of performance under "normal" operating conditions (which make up the vast majority of data and, in the case of solar PV, energy harvest).

## MATLAB GUIDE
Type "guide" in workspace to develop a GUI script that you can compile to an EXE (a la graphical programming languages like Simulink or LabVIEW, or AutoCAD; namely, drawn primarily via use of the mouse).

## Errors Upon Compiling EXE
Make sure you do not exceed the maximum file character length when you compile. This will throw a nondescript error.

## GUI
Initiate default values in script (do not pre-populate fields with text). Declare global variables to communicate between the GUI and EXE script.

## EXE Design Sequence
TLDR: Design EXE_CFG first and EXE_GUI second.
1. Tool_Name_EXE_CFG: First, design the EXE to get the user inputs from the text file; e.g., parse by "=" sign using references to line numbers. CFG = Configuration aka Config aka CONFIG file.
2. Tool_Name_EXE_GUI: Next, once the CFG file is well-designed, design the EXE to get user inputs from the GUI.

## MATLAB Compiler
Unfortunately, you may need to carefully and manually map and keep track of ALL the file dependencies for a given EXE program. A single script compiled into an EXE can be dependent on hundreds of other scripts, functions, and other file types (*.mat, *.csv, *.m, etc.). Depending on how you design the software (and write the main script, etc.), you may have to manually add all of these dependent files at the time of compilation. Best to design the main script as a series of script and function calls, so that it is clear to the compiler which files are required for the EXE to properly run. Nonetheless, it is probably best practice to manually keep track of file dependencies (e.g., in a CSV database).

Moreover, keep track of all unique EXE deployments in a CSV database (unique ID, names, descriptions; namely, including every input to the Application Compiler including the Log File name).

## Update Name of GUI
First, sync up in Git. Then, in MATLAB:
$ guide
File save as. Enter the new name. It will make a new *.fig and *.m file associated with the GUI. Delete the old ones with the previous names before making any changes, test them to make sure they work right, and sync again in Git. Then go ahead and continue editing the *.fig and *.m files relating to the GUI.

## MATLAB and LabVIEW
MATLAB can be run within LabVIEW via the MathScript module.

## High and Low Pass Filtration
ind = A(:,2)>0 & A(:,1) == 1;
A(ind,:) = NaN; % or = [];
Source: <https://www.mathworks.com/matlabcentral/answers/412533-index-a-matrix-to-erase-or-replace-with-nan-some-arrays-that-meet-condition/>

Also,
X = randi([1 10],10,3); % example data
TF = X(:,3) > 5; % for which rows is column 3 larger than 5
X(TF,:) = nan; % or = []; % remove those rows
Source: <https://www.mathworks.com/matlabcentral/answers/179379-removing-rows-from-all-columns-based-on-values-of-one-column/>

## Format MATLAB Workspace
% Format MATLAB workspace
close all
clearvars -except custom_filt_flag % custom_filt_flag allows custom filter hack
clc
format long g
format compact

## Compiled Standalone EXE
Critical notes for compiled MATLAB EXE:
--Link to MATLAB Runtime installed in order to run EXE
<https://www.mathworks.com/products/compiler/matlab-runtime.html/>
--INPUTTED DATA FILES CANNOT BE OPEN AT SAME TIME PROGRAM IS RUN!!!

## _dev MATLAB Path
Add all files to path before working in MATLAB and before compiling an EXE. Get used to adding files to the MATLAB path!

## MATLAB Import Wizard
Manually import data from Excel using the Import Wizard.
$ Start > Import Wizard > Create vectors using column names > Finish

## Convert Excel Datetime to MATLAB Datetime
Source(s):
<https://web.archive.org/web/20150514103736/https://www.mathworks.com/matlabcentral/newsreader/view_thread/250465/>
<https://www.mathworks.com/help/finance/x2mdate.html>
MATLAB_Date = x2mdate(ExcelDateNumber,Convention)

## Convert Number to String
Source(s):
<https://www.mathworks.com/help/matlab/ref/datestr.html>
DateString = datestr(DateVector)
ones((size(x,1)-1),1) % zero in first row, ones in other rows
Time_interval = input(['Enter the time interval for the input '... 
    'data set (in minutes): ']);

## Import Excel Data File
NB: xlsread is deprecated; now use readtable, readmatrix, or readcell.
Source(s):
<https://www.mathworks.com/help/matlab/ref/uigetfile.html>
<https://www.mathworks.com/help/matlab/ref/xlsread.html>
[baseFileName,folder] = uigetfile('*.xl*','Specify an Excel file')
fullFileName = fullfile(folder,baseFileName);
% fullFileName = input('Please enter the filename (full path): ','s');
[num,txt,raw] = xlsread(fullFileName);

## Function Layout
Put help notes above or below function name, e.g.:
% Option 1.
% Blah blah help notes & comments
function blah = mycustomfcnname(input1,input2)
% Option 2.
function blah = mycustomfcnname(input1,input2)
% Blah blah help notes & comments

## Vector Dot Division & Multiplication
NB: Adding dots allows for vectorization, i.e., a vector of plane-of-array irradiance Gpoa (vs. a singular, scalar value) in the following equation for Efficiency:
Eta = (Pmp/(height*width))./Gpoa
e.g., Height & width of PV module or system

## Other Conventions & Syntax
Indent text w/in function
function [y1,y2,y3] = f(x1,x2,x3)
% The purpose of this function is...
	y1 = x1*1;
	y2 = x2*2;
	y3 = x3*3;
end

## Gauge R&R aka Gage R&R Study
% gage R&R
% Simulate a measurement system by randomly generating the operators,
% parts, and the measurements, y , operators do on the parts.
rng(1234,'twister')               % for reproducibility
y = randn(100,1);                 % measurements
part = ceil(3*rand(100,1));       % parts
operator = ceil(2*rand(100,1));   % operators
% Conduct a gage R&R study for this system using a mixed ANOVA model
% without interactions.
gagerr(y,{part, operator},'randomoperator',true)
Source (w/ slight modifications): https://web.archive.org/web/20240419230139/https://www.mathworks.com/help/stats/gagerr.html

## Clear Workspace
Preferred: clear all; close all; clc
Other (not preferred):
clc close clear
clc; clear; close
clc; clear; close all

## Clear vs. clearvars
Mind your clear vs. clearvars:
clearvars -except <insert_what_you_wish_to_keep>

## Carriage Return In String
\n

## If Statements
Or -> Use "|"
And -> Use "&"
Logic Or -> Use "||"
Logic And -> Use "&&"

## Graphical User Interface GUI
Adjust settings:
Tools > GUI Options... > Proportional
NOTE: If you update filename, you need to update all the active fields in the GUI to reflect the proper filenames - these will not show up in a Ctrl+F Find All search.

## Active Filepath Directory
Add entire active repo folder directory (incl. sub-folders) to MATLAB path before working with or running in MATLAB Interactive Development Environment IDE.